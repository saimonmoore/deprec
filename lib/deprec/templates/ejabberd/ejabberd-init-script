#! /bin/sh
#
# ejabberd        Start/stop ejabberd server
#
#### BEGIN INIT INFO
# Provides:          ejabberd
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts ejabberd jabber server
# Description:       Starts ejabberd jabber server, an XMPP
#                    compliant server written in Erlang.
### END INIT INFO
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
EJABBERDCTL=/usr/local/sbin/ejabberdctl
NAME=ejabberd
test -f $EJABBERDCTL || exit 0
. /lib/lsb/init-functions
# Include ejabberd defaults if available
if [ -f /etc/default/ejabberd ] ; then
    . /etc/default/ejabberd
fi
ctl()
{
    action="$1"
    $EJABBERDCTL $action >/dev/null
}
# 0 is force-ok, 1 is force-ko, 2 is don't know
opstatus=2
case "$1" in
    start)
        log_daemon_msg "Starting jabber server: $NAME"
        if ctl status ; then
            log_daemon_msg "Server is already running."
 		opstatus=0
        else
            ctl start
        fi
    ;;
    stop)
        log_daemon_msg "Stopping jabber server: $NAME"
        if ctl status ; then
            if ctl stop ; then
                cnt=0
                sleep 1
                while ctl status ; do
                    cnt=`expr $cnt + 1`
                    if [ $cnt -gt 60 ] ; then
                        log_daemon_msg "Could not stop server."
                        opstatus=1
                        break
                    fi
                    sleep 1
                done
            else
                opstatus=1
            fi
        else
            log_daemon_msg "Server is not running."
            opstatus=0
        fi
    ;;
    restart|force-reload)
        log_daemon_msg "Restarting jabber server: $NAME"
        if ctl status ; then
            ctl restart
        else
            log_daemon_msg "Server is not running. Starting $NAME"
            ctl restart
        fi
    ;;
    *)
        echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload}" >&2
        exit 1
    ;;
esac
if [ $opstatus = 2 ] ; then
 if [ $? -eq 0 ]; then
 	log_end_msg 0
 else
     log_daemon_msg "Errors were encoundered."
     log_end_msg 1
 fi
else
 log_end_msg $opstatus
fi
exit 0